@page "/addproperty"

@using apartment_app.Data
@using System.IO;
<link href="css/AddProperty.css" rel="stylesheet" />

<h1>Add Property</h1>


<form>

    (all submissions are subject to approval)<br><br />

    <label class="standard_label" for="ownerName">Property Owner:</label>
    <input @bind="property.Owner" @bind:event="oninput" class="standard_input" type="text" id="ownerName" name="ownerName"><br><br>
    <label class="standard_label" for="addressLine1">Address (Line 1):</label>
    <input @bind="property.AddressLine1" @bind:event="oninput" class="standard_input" type="text" id="addressLine1" name="addressLine1"><br><br>
    <label class="standard_label" for="addressLine2">Address (Line 2):</label>
    <input @bind="property.AddressLine2" @bind:event="oninput" class="standard_input" type="text" id="addressLine2" name="addressLine2"><br><br>
    <label class="standard_label" for="ratesName">Rent (Per person):</label>
    <input @bind="property.Rent" @bind:event="oninput" class="standard_input" type="number" id="ratesName" name="ratesName"><br><br>
    <label class="standard_label" for="numOccupants">Spaces (total):</label>
    <input @bind="property.Spaces" @bind:event="oninput" class="standard_input" type="number" id="numOccupants" name="numOccupants"><br><br>
    <label class="standard_label" for="spacesAvailable">Spaces available:</label>
    <input @bind="property.SpacesAvailable" @bind:event="oninput" class="standard_input" type="number" id="spacesAvailable" name="spacesAvailable"><br><br>

    <textarea @bind="property.Description" @bind:event="oninput" id="propertyDescription" name="propertyDescription" rows="4" cols="50" placeholder="Enter any additional information..."></textarea><br><br>


    <label class="standard_label" for="uploadImages">Upload Images:</label>

    <InputFile id="uploadFiles" multiple accept="image/x-png,image/jpeg" OnChange="HandleFilesSelected" />


    <input type="submit" value="Submit" @onclick="CreatePropertyObject">
</form>


@if (selectedFiles != null)
{
    foreach (var file in selectedFiles)
    {
        var isLoading = file.Data.Position > 0;

        <div class="file-row">
            <!-- File info -->
            <div>
                <h2>@file.Name</h2>
            </div>

            <!-- Upload button -->
            <button @onclick="() => LoadFile(file)" disabled="@isLoading">
                @if (!isLoading)
                {
                    <span>Load</span>
                }
                else
                {
                    <span>Loaded @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
                }
            </button>
        </div>
    }
}


@code {

    public Property property { get; set; } = new Property();
    IFileListEntry[] selectedFiles;

    private void CreatePropertyObject()
    {
        TempUserDB.Properties.Add(this.property);
        // Put property object in database

    }

    void HandleFilesSelected(IFileListEntry[] files)
    {
        selectedFiles = files;
    }

    async Task LoadFile(IFileListEntry file)
    {
        // So the UI updates to show progress
        file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

        // Just load into .NET memory to show it can be done
        // Alternatively it could be saved to disk, or parsed in memory, or similar
        var ms = new MemoryStream();
        await file.Data.CopyToAsync(ms);
        property.FileNames.Add(file.Name);
    }

}
