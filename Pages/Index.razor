@page "/"
@inject NavigationManager NavManager
@inject PropertiesContext PropertiesDB
@using apartment_app.Data
@using Microsoft.EntityFrameworkCore

<link href="css/Index.css" rel="stylesheet" />

<div class="index-page">
    <h1>Search Properties</h1>
    <h5>(Under Construction)</h5>
    <h5>(Please Register and Login)</h5>


    <div class="search">
        <input type="search" class="form-control search-input" placeholder="Search" />
        <button class="btn btn-info" type="button">Search</button>
    </div>

    <table class="search-table table table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Owner</th>
                <th scope="col">Address</th>
                <th scope="col">Rent</th>
                <th scope="col">Total Spaces</th>
                <th scope="col">Spaces avaiable</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Properties.Count; i++)
            {
                int index = i;
                <tr @onclick="@(() => NavManager.NavigateTo("/viewproperty/" + Properties[index].ID))">
                    <th scope="row">@(i + 1)</th>
                    <td>@Properties[i].Name</td>
                    @if (Properties[i].Owner == null)
                    {
                        <td><button class="btn btn-secondary" @onclick="@(() => NavManager.NavigateTo("/viewproperty/" + Properties[index].ID))"> No Owner, Claim now</button></td>
                    }
                    else
                    {
                        <td>@(Properties[i].Owner.FirstName + " " + @Properties[i].Owner.LastName)</td>
                    }
                    <td>@(Properties[i].AddressLine1 + "\n" + @Properties[i].AddressLine2)</td>
                    <td>@(Properties[i].Rent + "$")</td>
                    <td>@Properties[i].TotalSpaces</td>
                    <td>@Properties[i].SpacesAvailable</td>
                    <td>@Properties[i].Description</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Property> Properties { get; set; } = new List<Property>() {};

    protected override async Task OnInitializedAsync()
    {
        Properties = await PropertiesDB.Property.ToListAsync();
    }
}

